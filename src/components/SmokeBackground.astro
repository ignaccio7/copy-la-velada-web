<div id="smoke-bkg" class="smoke fixed top-0 h-full w-full -z-20">

</div>

<script>
  // Biblioteca de animaciones 3D
import * as THREE from 'three'

  const $bkg = document.getElementById('smoke-bkg')
  
  let w = window.innerWidth
  let h = window.innerHeight

  //PARA DETECTAR EL TIPO DE TEMA OSCURO O CLARO
  // const THEME = {
  //   dark : {
  //     background: 0x666666,
  //     light: 0xffffff,
  //     opacity:1
  //   },
  //   light: {
  //     background: 0xeeeeee,
  //     light: 0xffffff,
  //     opacity:0.3
  //   }
  // } as const
  
  let currentTheme = {
      background: 0x666666,
      light: 0xffffff,
      opacity:1
    }
  //PARA DETECTAR EL TIPO DE TEMA OSCURO O CLARO

  // Para inicializar Three.js 
  // Necesitamos 3 cosas basicas: escena, cámara, rendereizador

  // escena 
  const scene = new THREE.Scene()

  // camara -> hay diferentes pero aqui usaremos la perspectiva
  // la cual recibira 
  /**
   * 75 Field of view -> El angulo de vision que tendra la perspecitva para observar la animacion
   * w / h -> Relacion de aspecto -> ya que la camara queremos que sea justamente el fondo de la web
   * 1, 1000 -> profundidad de la camara tanto cercana , lejana que se podra renderizar para ver.
   */
  const camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000)
  camera.position.z = 10 // profundidad
  
  scene.add(camera)

  // renderizador -> el que reproducira la animacion  -> igual hay varios en este caso WebGL
  const renderer = new THREE.WebGLRenderer()
  renderer.setSize(w, h)
  // color de fondo . opcional <opacidad de 0 a 1>
  // renderer.setClearColor(0x333333, 1)
  renderer.setClearColor(currentTheme.background, 0)

  $bkg?.appendChild(renderer.domElement)  

  // añadir una luz directional    
  // const light = new THREE.DirectionalLight(0xffffff, 0.5) // el color y la intensidad
  const light = new THREE.DirectionalLight(currentTheme.light, 0.5) // el color y la intensidad
  // posicion de la luz x,y,z
  light.position.set(-1,3,1)
  scene.add(light)  

  // para saber de donde esta viniendo la luz y acomodar a nuestro gusto THREE tiene un helper  
  // const helper = new THREE.DirectionalLightHelper(light, 5) // la luz, como de grande aparecera el helper
  // scene.add(helper)


  // Para crear un objeto tambien necesitamos 3 cosas
  /**
   * 1. Geometria  -> ancho alto profundidad
   * 2. Material -> Material basico, porque tambien hay materiales que les refleja la luz etc
   * 3. Malla (mesh) -> Ahora creamos el cubo
   */
  
  // * 1. Geometria  -> ancho alto profundidad -> un cubo
  const geometry = new THREE.BoxGeometry(1,1,1)
  // * 2. Material -> Material basico, porque tambien hay materiales que les refleja la luz etc
  const material = new THREE.MeshBasicMaterial({
    color: '#0099ff'
  })
  // * 3. Malla (mesh) -> Ahora creamos el cubo
  const cube = new THREE.Mesh(geometry, material)
  // añadimos a la escena
  // scene.add(cube)


  const smokeParticles: THREE.Mesh[] = [] // para las particulas del humo
  const loader = new THREE.TextureLoader() // el loader de las texturas
  // por si da problemas al momento de desplegar. En localhost no da problemas. Da problemas ya que no nos dejaria cargar el recurso de la textura 
  loader.crossOrigin = ""

  loader.load('/smoke.png', (texture) => {
    // 1. Geometria
    // creamos un plano geometrico de 300x300
    const smokeGeo = new THREE.PlaneGeometry(300, 300) // no tiene profundidad ya que solo necesitamos como una hoja donde añadiremos la particula

    // 2. Material
    const smokeMaterial = new THREE.MeshLambertMaterial({
      map: texture, // que mapee la textura en esta gemoetria 
      transparent: true, // que sea transparente
      opacity: currentTheme.opacity
    })

    // 3. Malla (mesh)
    const NUM_OF_PARTICLES = 300
    for (let p = 0; p < NUM_OF_PARTICLES; p++) {
      // creamos la malla con la geometria y el material
      const particle = new THREE.Mesh(smokeGeo, smokeMaterial)

      // posicionamos aletoriamente en la x,y,z
      particle.position.set(
        Math.random() * 500 - 250, // X (de -250 a 250)
        Math.random() * 500 - 250, // Y (de -250 a 250),
        Math.random() * 1000 - 100 // Z (de -100 a 900)
      )
      // añadimos la particula a la escena
      scene.add(particle)
      // añadimos la particula al array
      smokeParticles.push(particle)
    }

  })

  // para arreglar el problema de redimencionamiento 
  function resize () {
    w = window.innerWidth
    h = window.innerHeight
    camera.aspect = w / h
    camera.updateProjectionMatrix() // este metodo siempre se debe ejecutar cuando se cambie los parametros de la camara
    renderer.setSize(w, h)
  }

  // para animar ya sea el cubo u otra cosa
  function animate() {
    requestAnimationFrame(animate) // para llamar en cada frame que se renderice a esta funcion

    // cube.rotation.x += 0.01
    // cube.rotation.y += 0.01
    // cube.position.x += 0.01
    // cube.position.y += 0.01
    // cube.position.z += 0.01

    smokeParticles.forEach((particle) => {
      particle.rotation.z += 0.001
    })


    renderer.render(scene, camera)
  }

  // renderer.render(scene, camera)
  animate()

  // este evento se disparara continuamente cuando se redimencione la ventana
  window.addEventListener("resize", resize)

</script>