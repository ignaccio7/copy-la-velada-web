---
// Polymorphic: En este contexto, un componente “polimórfico” es un componente que puede renderizarse como cualquier etiqueta HTML. Esto se logra pasando una prop as al componente, que determina qué etiqueta HTML se renderiza. El tipo Polymorphic se usa para tipar este comportamiento.
// as: Tag: Aquí, as es una prop que se pasa al componente, y Tag es una variable que almacena el valor de as. Por ejemplo, si pasas as="div" a tu componente, entonces Tag será "div", y el componente se renderizará como un elemento <div>
// import type { HTMLTag, Polymorphic } from "astro/types"

// type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }>

import type { HTMLTag } from "astro/types"

interface Props {
  as?: HTMLTag;
  class?: string;
}

const { as: Tag, class: className, ...props } = Astro.props

---

<Tag
	class:list={[
		"inline-block skew-x-[-21deg] cursor-pointer border-2 border-primary",
		"font-semibold uppercase",
		"px-5 py-2.5",
		"before:absolute before:-inset-0.5 before:origin-right before:scale-x-0 before:bg-primary",
		"hover:scale-110 hover:text-secondary hover:before:origin-left hover:before:scale-x-100",
		"aria-disabled:pointer-events-none aria-disabled:border-[#666] aria-disabled:bg-[#666] aria-disabled:text-[#111]",
		"ease-in motion-safe:transition-[color,transform] motion-safe:before:transition-transform motion-safe:before:duration-300 motion-safe:before:ease-in motion-safe:hover:delay-100 motion-safe:hover:ease-out motion-safe:hover:before:delay-100 motion-safe:hover:before:ease-out",
		className,
	]}
	{...props}
>
	<span class="inline-block skew-x-[21deg]"><slot /></span>
</Tag>